pipeline{
    agent {
        kubernetes {
            yaml '''
              apiVersion: v1
              kind: Pod
              metadata:
                name: esthesis-release
                namespace: jenkins
              spec:
                affinity:
                  podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 50
                      podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - key: jenkins/jenkins-jenkins-agent
                            operator: In
                            values:
                            - "true"
                        topologyKey: kubernetes.io/hostname
                securityContext:
                  runAsUser: 0
                  runAsGroup: 0
                containers:
                - name: esthesis-release-builder
                  image: eddevopsd2/ubuntu-dind:dind-mvn3.6.3-jdk15-node16.14.2-buildx-helm
                  volumeMounts:
                  - name: maven
                    mountPath: /root/.m2/
                    subPath: esthesis
                  - name: docker
                    mountPath: /root/.docker
                  tty: true
                  securityContext:
                    privileged: true
                    runAsUser: 0
                    fsGroup: 0
                imagePullSecrets:
                - name: regcred
                volumes:
                - name: maven
                  persistentVolumeClaim:
                    claimName: maven-nfs-pvc
                - name: docker
                  persistentVolumeClaim:
                    claimName: docker-nfs-pvc
            '''
            workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: 'workspace-nfs-pvc', readOnly: false)
        }
    }
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 3, unit: 'HOURS')
    }
    stages{
    	stage ('Prerequisites') {
            steps {
                container (name: 'esthesis-release-builder') {
                    sh 'dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock &> dockerd-logfile &'
                    sh '''
                        [ -d /sys/fs/cgroup/systemd ] || mkdir /sys/fs/cgroup/systemd
                        mount -t cgroup -o none,name=systemd cgroup /sys/fs/cgroup/systemd

                        curl -L "https://github.com/docker/compose/releases/download/v2.12.2/docker-compose-$(uname -s)-$(uname -m)"  -o /usr/local/bin/docker-compose
                        mv /usr/local/bin/docker-compose /usr/bin/docker-compose
                        chmod +x /usr/bin/docker-compose
                    '''
                }
            }
        }
        stage ("Prompt for Input") {
            steps {
                container (name: 'esthesis-release-builder') {
                    script {
                        env.RELEASE_VERSION = input message: 'Release version:',
                                         parameters: [string(defaultValue: '',
                                                      description: 'Attention: To avoid Git conflicts, please do not push to esthesis-iot git repositories or build esthesis-device release job before this one finishes.',
                                                      name: 'Release version')]
                        env.NEXT_DEV_VERSION = input message: 'Snapshot version:',
                                         parameters: [string(defaultValue: '',
                                                      description: '',
                                                      name: 'Next development version')]
                    }
                }
            }
        }
        stage ("Clone projects") {
            steps{
                container (name: 'esthesis-release-builder') {
                    withCredentials([usernamePassword(credentialsId: 'Jenkins-Github-token',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            git config --global user.email "devops-d2@eurodyn.com"
                            git config --global user.name "$Username"
                            git clone https://$Username:$Password@github.com/esthesis-iot/esthesis-core.git
                        '''
                    }
                }
            }
        }
        stage ("esthesis-core: Changes for RELEASE version"){
            steps{
                container (name: 'esthesis-release-builder') {
                    withCredentials([usernamePassword(credentialsId: 'Jenkins-Github-token',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            git remote set-url origin https://$Username:$Password@github.com/esthesis-iot/esthesis-core.git
                            cd esthesis-core
                            git checkout v2

                            cd esthesis-server
                            mvn versions:set -DnewVersion=$RELEASE_VERSION
                            mvn versions:commit

                            cd ../esthesis-ui
                            sed -i 's|\"version\":.*$|\"version\": \"'$RELEASE_VERSION'\",|' package.json
                            awk -v sb='  \"name\": \"esthesis-ui\",\n  \"version\": \"'$RELEASE_VERSION'\",' '/"name": "esthesis-ui",/,/"version":.*/ { if ( $0 ~ /"version":.*/ ) print sb; next } 1' package-lock.json > temp.json && cp -f temp.json package-lock.json && rm temp.json

                            cd ..
                            sed -i "s|esthesisiot/esthesis-server:.*$|esthesisiot/esthesis-server:$RELEASE_VERSION|" docker-compose.yml
                            sed -i "s|esthesisiot/esthesis-ui:.*$|esthesisiot/esthesis-ui:$RELEASE_VERSION|" docker-compose.yml
                        '''
                    }
                }
            }
        }
        stage ("Helm Package for RELEASE version"){
            steps{
                container (name: 'esthesis-release-builder') {
                    withCredentials([usernamePassword(credentialsId: 'Jenkins-Github-token',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''#!/bin/bash
                            cd esthesis-core/helm/esthesis-platform
                            find . -name Chart.yaml | xargs sed -i "s|version:.*$|version: $RELEASE_VERSION|"
                            cd charts
                            find . -name *.yaml | xargs sed -i "s|esthesisiot/esthesis-ui:.*$|esthesisiot/esthesis-ui:$RELEASE_VERSION|"
                            find . -name *.yaml | xargs sed -i "s|esthesisiot/esthesis-server:.*$|esthesisiot/esthesis-server:$RELEASE_VERSION|"

                            git commit -a -m "release: prepare release $RELEASE_VERSION"
                            git tag -a $RELEASE_VERSION -m "$RELEASE_VERSION"
                            git push https://$Username:$Password@github.com/esthesis-iot/esthesis-core HEAD:v2 --tags
                        '''
                    }
                }
            }
        }
        stage ("esthesis-core: Build & Push Docker images"){
            environment {
		         DOCKERHUB_CREDENTIALS=credentials('dockerhub-credentials')
	        }
            steps{
                container (name: 'esthesis-release-builder') {
                    sh '''
                        cd esthesis-core
                        echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                        docker-compose -f docker-compose.yml build esthesis-ui
                        docker push esthesisiot/esthesis-ui:$RELEASE_VERSION
                        docker-compose -f docker-compose.yml build esthesis-server
                        docker push esthesisiot/esthesis-server:$RELEASE_VERSION
                    '''
                }
            }
        }
        stage ("esthesis-core: Changes for next development version"){
            steps{
                container (name: 'esthesis-release-builder') {
                    withCredentials([usernamePassword(credentialsId: 'Jenkins-Github-token',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            cd esthesis-core/esthesis-server
                            mvn versions:set -DnewVersion=$NEXT_DEV_VERSION
                            mvn versions:commit

                            cd ../esthesis-ui
                            sed -i 's|\"version\":.*$|\"version\": \"'$NEXT_DEV_VERSION'\",|' package.json
                            awk -v sb='  \"name\": \"esthesis-ui\",\n  \"version\": \"'$NEXT_DEV_VERSION'\",' '/"name": "esthesis-ui",/,/"version":.*/ { if ( $0 ~ /"version":.*/ ) print sb; next } 1' package-lock.json > temp.json && cp -f temp.json package-lock.json && rm temp.json

                            cd ..
                            sed -i "s|esthesisiot/esthesis-server:.*$|esthesisiot/esthesis-server:$NEXT_DEV_VERSION|" docker-compose.yml
                            sed -i "s|esthesisiot/esthesis-ui:.*$|esthesisiot/esthesis-ui:$NEXT_DEV_VERSION|" docker-compose.yml
                        '''
                    }
                }
            }
        }
        stage ("Helm Charts for next development version"){
            steps{
                container (name: 'esthesis-release-builder') {
                    withCredentials([usernamePassword(credentialsId: 'Jenkins-Github-token',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            cd esthesis-core/helm/esthesis-platform
                            find . -name Chart.yaml | xargs sed -i "s|version:.*$|version: $NEXT_DEV_VERSION|"
                            cd charts
                            find . -name *.yaml | xargs sed -i "s|esthesisiot/esthesis-ui:.*$|esthesisiot/esthesis-ui:$NEXT_DEV_VERSION|"
                            find . -name *.yaml | xargs sed -i "s|esthesisiot/esthesis-server:.*$|esthesisiot/esthesis-server:$NEXT_DEV_VERSION|"

                            git remote set-url origin https://$Username:$Password@github.com/esthesis-iot/esthesis-core.git
                            git commit -a -m "release: prepare for next development iteration: $NEXT_DEV_VERSION"
                            git push https://$Username:$Password@github.com/esthesis-iot/esthesis-core HEAD:v2
                        '''
                    }
                }
            }
        }
    }
}
