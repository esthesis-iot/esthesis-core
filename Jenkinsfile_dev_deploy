pipeline {
    agent {
        kubernetes {
            yaml '''
              apiVersion: v1
              kind: Pod
              metadata:
                name: esthesis-dev-deploy
                namespace: jenkins
              spec:
                affinity:
                  podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 50
                      podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - key: jenkins/jenkins-jenkins-agent
                            operator: In
                            values:
                            - "true"
                        topologyKey: kubernetes.io/hostname
                securityContext:
                  runAsUser: 0
                  runAsGroup: 0
                containers:
                - name: esthesis-dev-deployer
                  image: eddevopsd2/ubuntu-dind:docker24-mvn3.8.5-jdk17-node18.16-go1.20-buildx-helm-helmfile
                  volumeMounts:
                  - name: maven
                    mountPath: /root/.m2/
                    subPath: esthesis
                  tty: true
                  securityContext:
                    privileged: true
                    runAsUser: 0
                    fsGroup: 0
                imagePullSecrets:
                - name: regcred
                volumes:
                - name: maven
                  persistentVolumeClaim:
                    claimName: maven-nfs-pvc
            '''
            workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: 'workspace-nfs-pvc', readOnly: false)
        }
    }
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 5, unit: 'HOURS')
    }
    stages {
    	stage ('Prerequisites') {
            steps {
                container (name: 'esthesis-dev-deployer') {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            apt-get update -y
                            apt-get install -y util-linux jq
                            docker login -u $Username -p $Password docker.io
                            [ -d /sys/fs/cgroup/systemd ] || mkdir /sys/fs/cgroup/systemd
                            mount -t cgroup -o none,name=systemd cgroup /sys/fs/cgroup/systemd
                        '''
                    }
                }
            }
        }
        stage ("Clone esthesis-iot projects") {
            steps{
                container (name: 'esthesis-dev-deployer') {
                    withCredentials([usernamePassword(credentialsId: 'Jenkins-Github-token',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            rm -rf esthesis-helm
                            git config --global user.email "devops-d2@eurodyn.com"
                            git config --global user.name "$Username"
                            git clone https://$Username:$Password@github.com/esthesis-iot/esthesis-helm
                        '''
                    }
                }
            }
        }
        stage ("Run esthesis-core-backend publish script"){
            steps{
                container (name: 'esthesis-dev-deployer') {
                    withCredentials([usernamePassword(credentialsId: 'harbor-creds',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            cd esthesis-core-backend
                            export ESTHESIS_REGISTRY_TYPE=auth
                            export ESTHESIS_REGISTRY_USERNAME=$Username
                            export ESTHESIS_REGISTRY_PASSWORD=$Password
                            ESTHESIS_REGISTRY_URL=harbor.devops-d2.eurodyn.com/esthesis ./publish.sh
                        '''
                    }
                }
            }
        }
        stage ("Run esthesis-core-ui publish script"){
            steps{
                container (name: 'esthesis-dev-deployer') {
                    withCredentials([usernamePassword(credentialsId: 'harbor-creds',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            cd esthesis-core-ui
                            export ESTHESIS_REGISTRY_TYPE=auth
                            export ESTHESIS_REGISTRY_USERNAME=$Username
                            export ESTHESIS_REGISTRY_PASSWORD=$Password
                            ESTHESIS_REGISTRY_URL=harbor.devops-d2.eurodyn.com/esthesis ./publish.sh
                        '''
                    }
                }
            }
        }
        stage ("Run esthesis-core-device publish script"){
            steps{
                container (name: 'esthesis-dev-deployer') {
                    withCredentials([usernamePassword(credentialsId: 'harbor-creds',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            cd esthesis-core-device
                            export ESTHESIS_REGISTRY_TYPE=auth
                            export ESTHESIS_REGISTRY_USERNAME=$Username
                            export ESTHESIS_REGISTRY_PASSWORD=$Password                        
                            ESTHESIS_REGISTRY_URL=harbor.devops-d2.eurodyn.com/esthesis ./publish.sh
                        '''
                    }
                }
            }
        }
        stage ("Deploy esthesis-core-deps"){
            steps{
                container (name: 'esthesis-dev-deployer') {
                    sh '''
                        cd esthesis-helm/esthesis-core-deps
                        export DOMAIN=esthesis-dev.eurodyn.com
                        export TIMEZONE=Europe/Athens
                        export ESTHESIS_ADMIN_USERNAME=esthesis-admin
                        export ESTHESIS_ADMIN_PASSWORD=esthesis-admin
                        export ESTHESIS_SYSTEM_USERNAME=esthesis-system
                        export ESTHESIS_SYSTEM_PASSWORD=esthesis-system
                        export KEYCLOAK_HOSTNAME=keycloak.$DOMAIN
                        export ESTHESIS_HOSTNAME=esthesis-core.$DOMAIN
                        export ESTHESIS_REPORTED_OIDC_AUTHORITY_URL="https://$KEYCLOAK_HOSTNAME/realms/esthesis"
                        export ESTHESIS_REPORTED_OIDC_POST_LOGOUT_URL="https://$ESTHESIS_HOSTNAME/logged-out"
                        export OIDC_AUTH_SERVER_URL="https://$KEYCLOAK_HOSTNAME/realms/esthesis"
                        export OIDC_CLIENT_AUTH_SERVER_URL="https://$KEYCLOAK_HOSTNAME/realms/esthesis"
                        export INGRESS_CLASS_NAME=nginx-esthesis-demo
                        export INGRESS_NGINX_ENABLED=true
                        export INGRESS_NGINX_LOAD_BALANCER_IP="10.250.98.191"
                        export INGRESS_NGINX_CUSTOM_SSL="wildcard-tls"
                        export ESTHESIS_LOCAL_CHARTS=true
                        export IMAGE_PULL_SECRET=regcred
                        ESTHESIS_REGISTRY_URL=harbor.devops-d2.eurodyn.com/esthesis helmfile sync -n esthesis-demo
                    '''
                }
            }
        }
        stage ("Deploy esthesis-core"){
            steps{
                container (name: 'esthesis-dev-deployer') {
                    sh '''
                        cd esthesis-helm/esthesis-core
                        export DOMAIN=esthesis-dev.eurodyn.com
                        export TIMEZONE=Europe/Athens
                        export ESTHESIS_ADMIN_USERNAME=esthesis-admin
                        export ESTHESIS_ADMIN_PASSWORD=esthesis-admin
                        export ESTHESIS_SYSTEM_USERNAME=esthesis-system
                        export ESTHESIS_SYSTEM_PASSWORD=esthesis-system
                        export KEYCLOAK_HOSTNAME=keycloak.$DOMAIN
                        export ESTHESIS_HOSTNAME=esthesis-core.$DOMAIN
                        export ESTHESIS_REPORTED_OIDC_AUTHORITY_URL="https://$KEYCLOAK_HOSTNAME/realms/esthesis"
                        export ESTHESIS_REPORTED_OIDC_POST_LOGOUT_URL="https://$ESTHESIS_HOSTNAME/logged-out"
                        export OIDC_AUTH_SERVER_URL="https://$KEYCLOAK_HOSTNAME/realms/esthesis"
                        export OIDC_CLIENT_AUTH_SERVER_URL="https://$KEYCLOAK_HOSTNAME/realms/esthesis"
                        export INGRESS_CLASS_NAME=nginx-esthesis-demo
                        export INGRESS_NGINX_ENABLED=true
                        export INGRESS_NGINX_LOAD_BALANCER_IP="10.250.98.191"
                        export INGRESS_NGINX_CUSTOM_SSL="wildcard-tls"
                        export ESTHESIS_LOCAL_CHARTS=true
                        export IMAGE_PULL_SECRET=regcred
                        ESTHESIS_REGISTRY_URL=harbor.devops-d2.eurodyn.com/esthesis helmfile sync -n esthesis-demo
                    '''
                }
            }
        }
    }
}