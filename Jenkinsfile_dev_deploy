pipeline {
    agent {
        kubernetes {
            yaml '''
              apiVersion: v1
              kind: Pod
              metadata:
                name: esthesis-dev-deploy
                namespace: jenkins
              spec:
                affinity:
                  podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 50
                      podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - key: jenkins/jenkins-jenkins-agent
                            operator: In
                            values:
                            - "true"
                        topologyKey: kubernetes.io/hostname
                securityContext:
                  runAsUser: 0
                  runAsGroup: 0
                containers:
                - name: esthesis-dev-deployer
                  image: eddevopsd2/ubuntu-dind:docker24-mvn3.9.6-jdk21-node18.16-go1.23-buildx-helm-argocd
                  volumeMounts:
                  - name: maven
                    mountPath: /root/.m2/
                    subPath: esthesis
                  - name: kubectl
                    mountPath: /root/.kube
                    subPath: esthesis-dev
                  tty: true
                  securityContext:
                    privileged: true
                    runAsUser: 0
                    fsGroup: 0
                imagePullSecrets:
                - name: regcred
                volumes:
                - name: maven
                  persistentVolumeClaim:
                    claimName: maven-nfs-pvc
                - name: kubectl
                  persistentVolumeClaim:
                    claimName: kubectl-nfs-pvc
            '''
            workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: 'workspace-nfs-pvc', readOnly: false)
        }
    }
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 5, unit: 'HOURS')
    }
    stages {
    	stage ('Prerequisites') {
            steps {
                container (name: 'esthesis-dev-deployer') {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            apt-get update -y
                            apt-get install -y util-linux jq
                            docker login -u $Username -p $Password docker.io
                            [ -d /sys/fs/cgroup/systemd ] || mkdir /sys/fs/cgroup/systemd
                            mount -t cgroup -o none,name=systemd cgroup /sys/fs/cgroup/systemd
                        '''
                    }
                }
            }
        }
        stage ('Clone Common and Bom Repositories') {
            steps {
                container (name: 'esthesis-dev-deployer') {
                    withCredentials([usernamePassword(credentialsId: 'Jenkins-Github-token',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            git config --global user.email "devops-d2@eurodyn.com"
                            git config --global user.name "$Username"
                            git clone https://$Username:$Password@github.com/esthesis-iot/esthesis-bom
                            git clone https://$Username:$Password@github.com/esthesis-iot/esthesis-common
                        '''
                    }
                }
            }
        }
        stage('Build Bom') {
            steps {
                container (name: 'esthesis-dev-deployer') {
                    sh '''
                        cd esthesis-bom
                        mvn clean install
                    '''
                }
            }
        }
        stage('Build Common') {
            steps {
                container (name: 'esthesis-dev-deployer') {
                    sh '''
                        cd esthesis-common
                        mvn clean install
                    '''
                }
            }
        }
        stage ("Run esthesis-core-backend publish script") {
            steps {
                script {
                    def success = false
                    def retries = 0
                    while (!success) {
                        if (retries < 5) {     
                            try {                      
                                container(name: 'esthesis-dev-deployer') {
                                    withCredentials([usernamePassword(credentialsId: 'harbor-creds',
                                    usernameVariable: 'Username',
                                    passwordVariable: 'Password')]){
                                        sh '''
                                            cd esthesis-core-backend
                                            export ESTHESIS_REGISTRY_TYPE=auth
                                            export ESTHESIS_REGISTRY_USERNAME=$Username
                                            export ESTHESIS_REGISTRY_PASSWORD=$Password
                                            ESTHESIS_REGISTRY_URL=harbor.devops-d2.eurodyn.com/esthesis ./publish.sh
                                        '''
                                    }
                                }
                                success = true // exit loop on success
                            } catch (Exception e) {
                                echo "Publish script failed. Retrying..."
                                retries++
                            }
                        } else {
                            success = true // exit loop on 10 retries
                            error "Publish script failed after 5 retries"
                        }
                    }
                }
            }
        }
        stage ("Run esthesis-core-ui publish script"){
            steps{
                script {
                    def success = false
                    def retries = 0
                    while (!success) {
                        if (retries < 5) {     
                            try {
                                container(name: 'esthesis-dev-deployer') {
                                    withCredentials([usernamePassword(credentialsId: 'harbor-creds',
                                    usernameVariable: 'Username',
                                    passwordVariable: 'Password')]){
                                        sh '''
                                            cd esthesis-core-ui
                                            export ESTHESIS_REGISTRY_TYPE=auth
                                            export ESTHESIS_REGISTRY_USERNAME=$Username
                                            export ESTHESIS_REGISTRY_PASSWORD=$Password
                                            ESTHESIS_REGISTRY_URL=harbor.devops-d2.eurodyn.com/esthesis ./publish.sh
                                        '''
                                    }
                                }
                                success = true // exit loop on success
                            } catch (Exception e) {
                                echo "Publish script failed. Retrying..."
                                retries++
                            }
                        } else {
                            success = true // exit loop on 10 retries
                            error "Publish script failed after 5 retries"
                        }
                    }
                }
            }
        }
        stage ("Run esthesis-core-device publish script"){
            steps{
                script {
                    def success = false
                    def retries = 0
                    while (!success) {
                        if (retries < 5) {     
                            try {
                                container(name: 'esthesis-dev-deployer') {
                                    withCredentials([usernamePassword(credentialsId: 'harbor-creds',
                                    usernameVariable: 'Username',
                                    passwordVariable: 'Password')]){
                                        sh '''
                                            cd esthesis-core-device
                                            export ESTHESIS_REGISTRY_TYPE=auth
                                            export ESTHESIS_REGISTRY_USERNAME=$Username
                                            export ESTHESIS_REGISTRY_PASSWORD=$Password                        
                                            ESTHESIS_REGISTRY_URL=harbor.devops-d2.eurodyn.com/esthesis ./publish.sh
                                        '''
                                    }
                                }
                                success = true // exit loop on success
                            } catch (Exception e) {
                                echo "Publish script failed. Retrying..."
                                retries++
                            }
                        } else {
                            success = true // exit loop on 10 retries
                            error "Publish script failed after 5 retries"
                        }
                    }
                }
            }
        }
        stage ("Deploy esthesis-demo"){
            steps{
                container (name: 'esthesis-dev-deployer') {
                    withCredentials([usernamePassword(credentialsId: 'argocd',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password')]){
                        sh '''
                            argocd login argocd.devops-d2.eurodyn.com:443 --username $Username --password $Password --grpc-web
                            argocd app terminate-op esthesis-core || true
                            argocd app delete esthesis-core -y || true
                            argocd app terminate-op esthesis-core-deps || true
                            argocd app delete esthesis-core-deps -y || true
                        '''
                    }
                }
            }
        }
    }
}