package esthesis.platform.server.service;

import esthesis.platform.server.config.AppConstants.Event;
import esthesis.platform.common.config.AppConstants.Generic;
import esthesis.platform.server.config.AppProperties;
import esthesis.platform.server.events.MQTTConfigurationChangedEvent;
import esthesis.platform.server.events.ZookeeperConfigurationChangedEvent;
import esthesis.platform.server.events.ZookeeperConnectivityEvent;
import esthesis.platform.server.events.ZookeeperConnectivityEvent.EVENT_TYPE;
import org.apache.curator.framework.recipes.cache.NodeCache;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

@Service
public class ClusterEventService implements ApplicationListener<ZookeeperConnectivityEvent> {

  // JUL reference.
  private static final Logger LOGGER = Logger.getLogger(ClusterEventService.class.getName());

  private NodeCache mqttNodeCache;
  private NodeCache zookeeperNodeCache;
  private final ZookeeperClientService zookeeperClientService;
  private final AppProperties appProperties;
  private final ZookeeperService zookeeperService;
  private final MQTTService mqttService;

  public ClusterEventService(ZookeeperClientService zookeeperClientService,
      AppProperties appProperties, ZookeeperService zookeeperService,
      MQTTService mqttService) {
    this.zookeeperClientService = zookeeperClientService;
    this.appProperties = appProperties;
    this.zookeeperService = zookeeperService;
    this.mqttService = mqttService;
  }

  @Override
  public void onApplicationEvent(ZookeeperConnectivityEvent event) {
    LOGGER.log(Level.FINEST, "Received {0}.", event.toString());
    if (event.getEventType() == EVENT_TYPE.CONNECTED && zookeeperClientService.isCluster()) {
      try {
        // Setup monitors for MQTT configuration changes.
        LOGGER.log(Level.FINE, "Starting cluster monitor for MQTT configuration changes.");
        zookeeperClientService.getZookeeperClient().createContainers(Event.MQTT_CONFIGURATION_EVENT_PATH);
        mqttNodeCache = new NodeCache(zookeeperClientService.getZookeeperClient(), Event.MQTT_CONFIGURATION_EVENT_PATH);
        mqttNodeCache.getListenable().addListener(() -> {
          final MQTTConfigurationChangedEvent mqttConfigurationChangedEvent = MQTTConfigurationChangedEvent
              .fromByteArray(zookeeperClientService.getZookeeperClient().getData()
                  .forPath(Event.MQTT_CONFIGURATION_EVENT_PATH));
          LOGGER.log(Level.FINEST, "Received {0}.", mqttConfigurationChangedEvent);
          // Handle the event, skipping events generated by this node.
          if (!mqttConfigurationChangedEvent.getNodeInitiatingChange().equals(appProperties.getNodeId())) {
            if (mqttConfigurationChangedEvent.isDeleted()) {
              mqttService.disconnect(mqttConfigurationChangedEvent.getMqttServerId(), true);
            } else {
              if (mqttConfigurationChangedEvent.getStateAfter() == Generic.ENABLED) {
                mqttService.disconnect(mqttConfigurationChangedEvent.getMqttServerId(), true);
                mqttService.connect(mqttConfigurationChangedEvent.getMqttServerId());
              }
            }
          } else {
            LOGGER.log(Level.FINEST, "Skipping self-generated event.");
          }
        });
        mqttNodeCache.start(true);
        LOGGER.log(Level.FINE, "Cluster monitor for MQTT configuration changes started.");

        // Setup monitors for Zookeeper configuration changes.
        LOGGER.log(Level.FINE, "Starting cluster monitor for Zookeeper configuration changes.");
        zookeeperClientService.getZookeeperClient().createContainers(Event.ZOOKEEPER_CONFIGURATION_EVENT_PATH);
        zookeeperNodeCache = new NodeCache(zookeeperClientService.getZookeeperClient(), Event.ZOOKEEPER_CONFIGURATION_EVENT_PATH);
        zookeeperNodeCache.getListenable().addListener(() -> {
          final ZookeeperConfigurationChangedEvent zookeeperConfigurationChangedEvent = ZookeeperConfigurationChangedEvent
              .fromByteArray(zookeeperClientService.getZookeeperClient().getData()
                  .forPath(Event.ZOOKEEPER_CONFIGURATION_EVENT_PATH));
          LOGGER.log(Level.FINEST, "Received {0}.", zookeeperConfigurationChangedEvent);
          // Handle the event, skipping events generated by this node.
          if (!zookeeperConfigurationChangedEvent.getNodeInitiatingChange().equals(appProperties.getNodeId())) {
            zookeeperService.disconnect();
            zookeeperService.connect();
          } else {
            LOGGER.log(Level.FINEST, "Skipping self-generated event.");
          }
        });
        zookeeperNodeCache.start(true);
        LOGGER.log(Level.FINE, "Cluster monitor for Zookeeper configuration changes started.");


      } catch (Exception e) {
        LOGGER.log(Level.SEVERE, "Could not establish monitors for cluster configuration changes.", e);
      }
    } else if (event.getEventType() == EVENT_TYPE.DISCONNECTED) {
      try {
        if (mqttNodeCache != null) {
          LOGGER.log(Level.FINE, "Closing MQTT configuration changes cluster monitor.");
          mqttNodeCache.close();
          mqttNodeCache = null;

          LOGGER.log(Level.FINE, "Closing Zookeeper configuration changes cluster monitor.");
          zookeeperNodeCache.close();
          zookeeperNodeCache = null;
        }
      } catch (IOException e) {
        LOGGER.log(Level.SEVERE, "Could not close monitors for cluster configuration changes.", e);
      }
    }
  }
}
